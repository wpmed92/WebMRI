<HTML>
<HEAD><TITLE>Newmat10 - exceptions</TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<H2><font color="#FF0000">Exceptions</H2></font>
<A HREF="cleanup.htm">  next</A> - 
<A HREF="cleanup.htm">  skip</A> - 
<A HREF="refer.htm">  up</A> - 
<A HREF="index.htm">  start</A><P>

Here is the class structure for exceptions:
<PRE>
Exception
  Logic_error
    ProgramException                 miscellaneous matrix error
    IndexException                   index out of bounds
    VectorException                  unable to convert matrix to vector
    NotSquareException               matrix is not square (invert, solve)
    SubMatrixDimensionException      out of bounds index of submatrix
    IncompatibleDimensionsException  (multiply, add etc)
    NotDefinedException              operation not defined (eg &lt;)
    CannotBuildException             copying a matrix where copy is undefined
    InternalException                probably an error in newmat
  Runtime_error
    NPDException                     matrix not positive definite (Cholesky)
    ConvergenceException             no convergence (e-values, non-linear, sort)
    SingularException                matrix is singular (invert, solve)
    SolutionException                no convergence in solution routine
    OverflowException                floating point overflow
  Bad_alloc                          out of space (new fails)
</PRE>
<P>
I have attempted to mimic the exception class structure in the C++ standard
library, by defining the Logic_error and Runtime_error classes.
<P>
If there is no catch statement or exceptions are disabled then my <TT>Terminate()</TT>
function in <TT>myexcept.h</TT> is called. This prints out an error message,
the dimensions and types of the matrices involved, the name of the routine
detecting the
exception, and any other information set by the <A HREF="error.htm">Tracer</A>
class. Also
see the section on <A HREF="error.htm">error messages</A> for additional notes
on the messages generated by the exceptions.
<P>
You can also print this information by printing <TT>Exception::what()</TT>.
<P>
See the file <TT>test_exc.cpp</TT> as an example of catching an exception and
printing the error message.
<P>
The 08 version of newmat defined a member function
<TT>void SetAction(int)</TT> to help customise the action when an
exception is called. This has been deleted in the 09 version. Now include
an instruction such as <TT>cout &lt;&lt; Exception::what() &lt;&lt; endl;</TT> in
the <TT>Catch</TT> or <TT>CatchAll</TT> block to determine the action.
<P>
The library includes the alternatives of using the inbuilt exceptions provided by
a compiler, simulating exceptions, or disabling exceptions.
See <A HREF="custom.htm">customising</A> for selecting the correct exception
option. 
<P>
The rest of this section describes my partial simulation of exceptions for
compilers which do not support C++ exceptions. I use Carlos Vidal's
article in the September 1992 <I>C Users Journal</I> as a starting point.
<P>
Newmat does a partial clean up of memory following throwing an exception
- see the next section. However, the present version will leave a little
heap memory unrecovered under some circumstances. I would not expect
this to be a major problem, but it is something that needs to be sorted
out.
<P>
The functions/macros I define are Try, Throw, Catch, CatchAll and
CatchAndThrow. Try, Throw, Catch and CatchAll correspond to try, throw,
catch and catch(...) in the C++ standard. A list of Catch clauses must
be terminated by either CatchAll or CatchAndThrow but not both. Throw
takes an Exception as an argument or takes no argument (for passing on
an exception). I do not have a version of Throw for specifying which
exceptions a function might throw. Catch takes an exception class name
as an argument; CatchAll and CatchAndThrow don't have any arguments.
Try, Catch and CatchAll must be followed by blocks enclosed in curly
brackets.
<P>
I have added another macro ReThrow to mean a rethrow, Throw().
This was necessary to enable the package to be compatible with both my
exception package and C++ exceptions.
<P>
If you want to throw an exception, use a statement like
<PRE>
   Throw(Exception("Error message\n"));
</PRE>
It is important to have the exception declaration in the Throw statement, rather
than as a separate statement.
<P>
All exception classes must be derived from the class, Exception, defined in
newmat and can contain only static variables. See the examples in newmat
if you want to define additional exceptions.
<P>
<A HREF="cleanup.htm">  next</A> - 
<A HREF="cleanup.htm">  skip</A> - 
<A HREF="refer.htm">  up</A> - 
<A HREF="index.htm">  start</A><P>
</BODY>
</HTML>

