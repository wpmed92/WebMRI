/*  gsmanager.h

    Mark Woolrich, FMRIB Image Analysis Group

    Copyright (C) 1999-2000 University of Oxford  */

/*  COPYRIGHT  */

#if !defined(gsmanager_h)
#define gsmanager_h

#include <iostream>
#include <fstream>
#include <string>
#include <vector>

#include "gsoptions.h"
#include "newimageall.h"
#include "design.h"

using namespace NEWIMAGE;

namespace Gs {
    
  // Give this class a file containing
  class Gsmanager
    {
    public:

      // constructor
      Gsmanager() : opts(GsOptions::getInstance()),
	ntapsi(16),
	ntpsi(23),
	psics(ntpsi),
	apsics(ntapsi),
	nmaskvoxels(0)
	{
	  psics << -.038057080835217922E0<<
	    .49141539302938713E0<<
	    -.056815747821244730E0<<
	    .008357821225914313E0<<
	    -.001333232857994342E0<<
	    .000220313287069308E0<<
	    -.000037040238178456E0<<
	    .000006283793654854E0<<
	    -.000001071263908506E0<<
	    .000000183128394654E0<<
	    -.000000031353509361E0<<
	    .000000005372808776E0<<
	    -.000000000921168141E0<<
	    .000000000157981265E0<<
	    -.000000000027098646E0<<
	    .000000000004648722E0<<
	    -.000000000000797527E0<<
	    .000000000000136827E0<<
	    -.000000000000023475E0<<
	    .000000000000004027E0<<
	    -.000000000000000691E0<<
	    .000000000000000118E0<<
	    -.000000000000000020E0;
	  
	  apsics <<-.0204749044678185E0<<
	    -.0101801271534859E0<<
	    .0000559718725387E0<<
	    -.0000012917176570E0<<
	    .0000000572858606E0<<
	    -.0000000038213539E0<<
	    .0000000003397434E0<<
	    -.0000000000374838E0<<
	    .0000000000048990E0<<
	    -.0000000000007344E0<<
	    .0000000000001233E0<<
	    -.0000000000000228E0<<
	    .0000000000000045E0<<
	    -.0000000000000009E0<<
	    .0000000000000002E0<<
	    -.0000000000000000E0;
	}

      // load data from file in from file and set up starting values
      void setup();

      // initialise
      void initialise();

      void run();
      void run_mh();

      // saves results in logging directory
      void save();

      // does wls
      void wls();

      // does variational Bayes
      void variational_bayes();

      // Destructor
      virtual ~Gsmanager() {}
 
    private:

      const Gsmanager& operator=(Gsmanager& par);     
      Gsmanager(Gsmanager& des);
      
      void multitfit(const Matrix& x, ColumnVector& m, SymmetricMatrix& covar, float& v) const;      

      float logtpdf(const float& v, const ColumnVector& x2, const float& phi) const;
      float digamma(float x) const;
      float csevl(const float x, const ColumnVector& cs, const int n) const;
      float mgradpt(const float v, const ColumnVector& xsq, const int P) const;
      float mdofls(const ColumnVector& xsq, const float phi, const int P) const;
      void t_contrast(const Matrix& gamsamples, const RowVector& tcontrast, float& cope, float& varcope, float& f, float& dof);

      void f_contrast(const Matrix& gamsamples, const Matrix& fcontrast, float& f, float& dof1, float& dof2);

      float z_t_contrast(const ColumnVector& gammean, const Matrix& gamS, const RowVector& tcontrast);

      float z_f_contrast(const ColumnVector& gammean, const Matrix& gamS, const Matrix& fcontrast);

      bool is_interesting_voxel(const ColumnVector& gammean, const Matrix& gamS, float zthresh);

      volume4D<float> copedata;
      volume4D<float> varcopedata;
      volume<float> mask;
      volume<float> zmask;
      Design design;

      volume4D<float> gamma_mean;
      volume4D<float> gamma_S;
      volume<float> gamma_v;

      volume4D<float> beta_b;
      volume4D<float> beta_c;

      volume4D<float> beta_mean;

      volume4D<float> m_mean;
      volume4D<float> m_var;

      int ngs;
      int nevs;
      int ntpts;
      int xsize;
      int ysize;
      int zsize;

      GsOptions& opts;

      const int ntapsi;
      const int ntpsi;
      ColumnVector psics;
      ColumnVector apsics;

      int nmaskvoxels;
    };
}   
#endif

